# -*- coding: utf-8 -*-
"""
@author: Lucas Moschen

This script contains the function divide_hhds, which distribute the households among the sub-regions created in divide_region.py. 
This function takes the matrix of assignment weights, the households dataframe being used, the list of dwellings dataframes 
already created in divide_region.py and the amount of dwellings in the decomposition round. 
It returns a list of household dataframes where each dataframe contains the households assigned to the corresponding sub-region.

    Parameters
    ----------
    hhd_df : DataFrame
        The household dataframe that will be divided.
    list_of_subregions : list
        List of dwellings dataframes so that each one represents a sub-region generated by divide_region.py.
    w : matrix
        The matrix of assignment weights.
    amount_dwe_in_round : int
        Amount of dwellings in the decomposition round.

    Returns
    -------
    list_households_dataframes : list
        The list of households dataframes where each one contains the households assigned to the corresponding sub-region. 
    build_time : float
        Time to build Gurobi model used to distribute the households.  
    opt_time : float
        Time to optimize Gurobi model used to distribute the households.       
"""

import math 
import time 
import pandas as pd 
import numpy as np 
import gurobipy as gp 
import psutil 

def divide_hhds(hhd_df: pd.DataFrame,
                list_of_subregions: list,
                w,
                amount_dwe_in_round: int):
    
    init_build_time = time.time() 

    # Get list of households
    H = hhd_df.index.tolist()

    amount_H = len(H)
    amount_sub_reg = len(list_of_subregions)
    
    print("\nGurobi model for household distribution is being created.")

    print("\nAmount of households:", amount_H)
    print("Amount of sub-regions:", amount_sub_reg) 

    # Initialize Gurobi model
    hhd_model = gp.Model("hhd Model")

    # Initialize the objective function
    obj_func = gp.LinExpr(0)

    # Create the matrix of Gurobi variables. Each one corresponds to a possible assignment between household and sub-region
    y = np.full((amount_H, amount_sub_reg), None) 
    for i in range(amount_H):
        for j in range(amount_sub_reg):
            y[i,j] = hhd_model.addVar(vtype = gp.GRB.BINARY) 

    # Loop on the sub-regions to create the model objective function
    for s in range(amount_sub_reg):

        dwes_in_s = list_of_subregions[s].index.tolist()

        # Build the weight between this sub-region and each household h of this round.
        for index, h in enumerate(H):

            weight = np.mean(w[h, dwes_in_s])
            obj_func.add(y[index, s], weight)
    
    # Add constraints that guarantee each household in exactly one sub-region.
    hhd_model.addConstrs((gp.quicksum(y[i, s] for s in range(amount_sub_reg)) == 1 for i in range(amount_H)))

    # Add constraints on the amount of households per sub-region.
    for s in range(amount_sub_reg):

        proportion = len(list_of_subregions[s]) / amount_dwe_in_round
        upper_bound_s = int(math.ceil(proportion * len(hhd_df)))
 
        hhd_model.addConstr((gp.quicksum(y[i, s] for i in range(amount_H)) <= upper_bound_s))

    # Set to do not print Gurobi output.
    hhd_model.setParam("OutputFlag", 0) 
    hhd_model.setObjective(obj_func)
    hhd_model.modelSense = gp.GRB.MAXIMIZE
    hhd_model.update() 

    end_build_time = time.time()
    build_time = end_build_time - init_build_time

    # Compute memory used by Gurobi model + W matrix
    mem = psutil.virtual_memory()
    print(f"\nRAM usage before optimize model to distribute households: {mem.used / (1024**3):.2f} GB ({mem.percent}%)")

    init_opt_time = time.time()
    hhd_model.optimize() 
    end_opt_time = time.time()
    opt_time = end_opt_time - init_opt_time   

    # Use the ready y matrix to distribute the households
    list_households_dataframes = [None] * amount_sub_reg
    for s in range(amount_sub_reg):
        list_indices_s = []
        for i in range(amount_H): 
            if int(round(y[i, s].x)) == 1:
                list_indices_s.append(H[i])
        list_households_dataframes[s] = hhd_df.loc[list_indices_s]  

    print("\nModel solved.")
    print("Build time of household distribution: " + str(round(build_time, 2)) + " seconds.")   
    print("Optimizing time of household distribution: " + str(round(opt_time, 2)) + " seconds.")

    # Remove gurobi model
    hhd_model.dispose()
    del hhd_model

    return list_households_dataframes, build_time, opt_time   